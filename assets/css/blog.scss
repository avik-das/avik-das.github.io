---
---

// SASS VARIABLES /////////////////////////////////////////////////////////////

$lighter-text-color: #666;
$body-padding: 20px;

// PAGE LAYOUT ////////////////////////////////////////////////////////////////

body {
  margin: auto;

  max-width: 48em;
  padding: $body-padding;
}

#post-date {
  text-align: center;
  color: $lighter-text-color;
}

// TEXT ///////////////////////////////////////////////////////////////////////

h1 { text-align: center; }
h1, h2, h3, h4, h5, h6 { font-family: sans-serif; }

p, ol, ul, pre { line-height: 1.4; }

blockquote {
  border-left: 2px solid #ddd;
  padding-left: 16px;
  margin-left: 16px;
}

hr {
  border: 0.5px solid #ccc;
  width: 50%;
  margin: 1em auto;
}

// IMAGES /////////////////////////////////////////////////////////////////////

figure {
  margin: 0;
  padding: 0;
  text-align: center;

  img {
    max-width: calc(100% + #{$body-padding * 2});
    margin: 0 0 0 #{-$body-padding};
  }

  .youtube-video {
    // Scaling Youtube videos is not trivial. The problem is, unlike an image,
    // the iframe used to embed the video does not have a "natural" height.
    // Thus, the HTML needs to specify both a static width and height. When the
    // width is changed with the above CSS, the height does not change.
    //
    // To scale the height automatically with the width, we do the following:
    //
    // - Wrap the iframe in a div. This container is the one whose width is
    //   set above.
    //
    // - Use `padding-bottom` to choose a height for the container relative to
    //   the width. The reason for choosing `padding-bottom` is outlined in
    //   this alistapart article [1]. Because we want this padding to fully
    //   control the height of the container, the height is set to zero.
    //
    // - The iframe contained inside the wrapper element is set to fill up the
    //   entire container using `position: absolute`. This requires the
    //   container to be position via `position: relative`, so that the iframe
    //   is laid out relative to the container (the `position` attribute
    //   performs positioning relative to the nearest parent with a `position`
    //   attribute).
    //
    // Unfortunately, because divs and iframes don't have a natural aspect
    // ratio, we have to specify one. Here, all Youtube videos will have an
    // aspect ratio of 16:9, which is what leads to the height to width ratio
    // of 9/16 = 56.25%.
    //
    // [1] http://alistapart.com/article/creating-intrinsic-ratios-for-video/

    position: relative;

    height: 0;
    padding-bottom: calc(56.25% + #{$body-padding * 2 * 0.5625});

    // Unlike images, which sometimes are skinny enough to not fill up the
    // entire width of the screen, Youtube videos will always be large enough.
    // Due to some strange interaction with iframes, we have to force these
    // videos to take up their maximum width.
    //
    // Thus, images have a max-width and Youtube videos have a width.
    width: calc(100% + #{$body-padding * 2});
    margin: 16px 0 16px #{-$body-padding};

    > iframe {
      position: absolute;
      left: 0;
      right: 0;
      width: 100%;
      height: 100%;
    }
  }

  figcaption {
    font-style: italic;
    font-size: .95em;
  }
}

// CODE SNIPPETS //////////////////////////////////////////////////////////////

pre {
  background: #eee;
  padding: $body-padding;

  overflow-x: auto;

  width: 100%;
  margin: 0 0 0 #{-$body-padding};
  padding: auto $body-padding;
}

.MathJax_Display { overflow-x: auto; }

// INTERACTIVE DEMOS //////////////////////////////////////////////////////////

.playable-demo-play-button {
  filter: drop-shadow(0 0 10px rgba(0, 0, 0, 0.2));
  &:hover { cursor: pointer; }
}

figure > canvas,
.container-interactive-canvas,
.container-interactive-canvas canvas {
  // NOTE: ensure that the actual canvas element gets the `max-width` assigned
  // to it. That will ensure the canvas' height is correctly scaled according
  // to its aspect ratio.
  //
  // Otherwise, if only the surrounding container has a `max-width`, the canvas
  // will still be squished horizontally, but its height will stay the same.

  max-width: 512px; // For older browsers that don't support `min()`
  max-width: min(512px, 100%);
  margin: 16px auto;
}

figure > canvas,
.container-interactive-canvas {
  border-radius: 4px;
  box-shadow: 0 0 6px 3px rgba(0, 0, 0, 0.15);
}

.container-interactive-canvas .interactive-diagram {
  background: #fff;

  display: flex;
  flex-direction: column;

  > svg {
    background: #eee;
    max-width: 512px;
  }

  > form {
    display: grid;
    grid-template-columns: auto 2fr;
    grid-gap: 16px;
    align-content: center;

    margin: 0 32px;
    padding: 32px 16px;

    font-family: sans-serif;

    > label {
      grid-colum: 1 / 2;
      justify-self: end;
      align-self: center;
      text-align: right;

      font-variant: small-caps;
    }

    > input {
      grid-colum: 2 / 3;
      align-self: center;
    }
  }
}

canvas.container-3d {
  // Ensure that dragging on 3D visualization canvases don't scroll the page,
  // as the dragging is used for model rotation.
  touch-action: none;
}

// FOOTER /////////////////////////////////////////////////////////////////////

#thanks { color: $lighter-text-color; }

#bottom-links {
  text-align: center;
  list-style: none;
  padding: 0;

  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;

  li {
    padding: 0 8px;
    a {
      display: block;
      height: 24px;
    }
  }
}
